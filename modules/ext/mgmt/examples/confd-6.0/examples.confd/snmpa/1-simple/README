 ConfD SNMP Agent Example - Simple
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The example show how a simple proprietary SNMP MIB, TAIL-F-TEST-MIB,
is used for accessing data from a YANG module called simple.yang.

The user has an existing YANG module and/or MIB and needs to provide a
mapping between the MIB objects to YANG data nodes.  This is done
using tailf:snmp-name or tailf:snmp-oid statements in the YANG module.

    simple.yang
    TAIL-F-TEST-MIB.mib

The example has been made up, and is not something taken from the real
world.  It's purpose is merely to show how a mapping can be done from
MIB objects into YANG .

1. Compiling the YANG module

The "simple" module is compiled with the 'confdc' compiler.

confdc -c simple.yang -o simple.fxs

2. Compiling the MIB

The MIB needs to be compiled in order to be loaded into the ConfD SNMP
Agent.  For each SNMP object in the MIB there must be a mapping into
a leaf in the YANG module.  The objects for the TAIL-F-TEST-MIB are
mapped to leafs in the "simple" module, in the simple.yang file.  
In order for the "confdc" compiler to compile the MIB, the MIB file needs to
have '.mib' as file extension.

Sometimes some of the objects in a MIB will not be implemented in the
system, for example when there is a standard MIB which cannot be
modified.  In this case, the user can write a "mib annotation file",
which instructs the SNMP agent in ConfD to reply with noSuchObject or
noSuchInstance whenever one of these objects are requested.  In this
example, we have chosen to not implement some objects in the
TAIL-F-TEST-MIB, and one object which is defined in the MIB as
writable, is implemented read-only.  This is defined in the file
TAIL-F-TEST-MIB.miba.

confdc -c -f $CONFD_DIR/etc/confd \
       --mib-annotation TAIL-F-TEST-MIB.miba \
       TAIL-F-TEST-MIB.mib simple.fxs

3. Configuring the ConfD SNMP Agent
   
The SNMP Agent is part of the ConfD daemon and can be enabled from
confd.conf file. Per default the SNMP agent is disabled.  Configure
the IP address and port of the SNMP agent, and list all the MIBs that
should be loaded at startup.

[confd.conf]

  <snmpAgent>
    <enabled>true</enabled>
    <ip>0.0.0.0</ip>
    <port>4000</port>
    <mibs>
      <file>TAIL-F-TEST-MIB.bin</file>
    </mibs>
  </snmpAgent>


Make the system with
      > make all

Start up the system with 
      > make start


4. Accessing data from the CLI

The configuration can be checked as usual by running the CLI.
   > confd_cli

ola connected from 127.0.0.1 using console on saturn.tail-f.com
ola@saturn> show configuration simpleObjects 

simpleObjects {
    numberOfServers 2;
    numberOfHosts 2;
    maxNumberOfServers 10;
    maxNumberOfHosts 10;
    hosts {
        host saturn@tail-f.com {
	etc...

The initial data comes from the "simple_init.xml" file.
  

5. Accessing the data from an SNMP Manager

Use any SNMP manager and connect it to the ConfD SNMP Agent.
The example below uses NetSNMP as a manager.

5a. SNMP Walk

   > export MIBS=`pwd`/TAIL-F-TEST-MIB.mib
   > snmpwalk -c public -v2c localhost:4000 enterprises
   TAIL-F-TEST-MIB::numberOfServers.0 = INTEGER: 2
   TAIL-F-TEST-MIB::numberOfHosts.0 = INTEGER: 2
   TAIL-F-TEST-MIB::maxNumberOfServers.0 = INTEGER: 10
   TAIL-F-TEST-MIB::maxNumberOfHosts.0 = INTEGER: 10
   TAIL-F-TEST-MIB::hostEnabled."vega@tail-f.com" = INTEGER: false(2)
   TAIL-F-TEST-MIB::hostEnabled."saturn@tail-f.com" = INTEGER: true(1)
   TAIL-F-TEST-MIB::hostNumberOfServers."vega@tail-f.com" = INTEGER: 0
   TAIL-F-TEST-MIB::hostNumberOfServers."saturn@tail-f.com" = INTEGER: 2
   etc...


5b. SNMP get

   > snmpget -c public -v2c localhost:4000 TAIL-F-TEST-MIB::maxNumberOfServers.0
   TAIL-F-TEST-MIB::maxNumberOfServers.0 = INTEGER: 42


5c. SNMP set

   > snmpset -c public -v2c localhost:4000 TAIL-F-TEST-MIB::maxNumberOfServers.0 i 43
   TAIL-F-TEST-MIB::maxNumberOfServers.0 = INTEGER: 43


5d. SNMP getnext

    The 'snmptable' command can used to print an entire MIB
    table. Since the index of the table is a string in SNMP, a length
    indicator is included in the rowindex. The table is therefore sorted
    with short strings before longer strings.
   

   > snmptable -Ci -c public -v2c localhost:4000 TAIL-F-TEST-MIB::hostTable
   SNMP table: TAIL-F-TEST-MIB::hostTable
                index hostEnabled hostNumberOfServers hostRowStatus
     "vega@tail-f.com"       false                   0        active
   "saturn@tail-f.com"        true                   2        active

   > snmpgetnext -c public -v2c localhost:4000 TAIL-F-TEST-MIB::hostEnabled.\"kalle\"
   TAIL-F-TEST-MIB::hostEnabled."vega@tail-f.com" = INTEGER: false(2)
   > snmpgetnext -c public -v2c localhost:4000 TAIL-F-TEST-MIB::hostEnabled.\"vega@tail-f.com\"
   TAIL-F-TEST-MIB::hostEnabled."saturn@tail-f.com" = INTEGER: true(1)

