{
  "name": "ngtemplate-loader",
  "version": "1.3.0",
  "description": "Include AngularJS templates in the Webpack bundle and preload the template cache.",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/webpack/bin/webpack.js --config=test/webpack.config.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/WearyMonkey/ngtemplate-loader.git"
  },
  "keywords": [
    "webpack",
    "angularjs",
    "loader"
  ],
  "author": {
    "name": "WearyMonkey"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "dependencies": {
    "jsesc": "^0.5.0",
    "loader-utils": "~0.2.2"
  },
  "devDependencies": {
    "html-loader": "^0.2.2",
    "raw-loader": "^0.5.1",
    "webpack": "^1.2.0"
  },
  "readme": "# AngularJS Template loader for [webpack](http://webpack.github.io/)\r\n\r\nIncludes your AngularJS templates into your webpack Javascript Bundle. Pre-loads the AngularJS template cache\r\nto remove initial load times of templates.\r\n\r\nngTemplate loader does not minify or process your HTML at all, and instead uses the standard loaders such as html-loader\r\nor raw-loader. This gives you the flexibility to pick and choose your HTML loaders.\r\n\r\n## Usage\r\n\r\n[Documentation: Using loaders](http://webpack.github.io/docs/using-loaders.html)\r\n\r\nngTemplate loader will export the path of the HTML file, so you can use require directly AngularJS with templateUrl parameters e.g. \r\n\r\n``` javascript\r\napp.directive('testDirective', function() {\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: require('ngtemplate!html!./test.html')\r\n    }\r\n});\r\n```\r\n\r\nngTemplate creates a JS module that initialises the $templateCache with the HTML under the file path e.g. \r\n\r\n``` javascript\r\nrequire(\"!ngtemplate?relativeTo=/projects/test/app!html!file.html\");\r\n// => generates the javascript:\r\n// angular.module('ng').run(['$templateCache', function(c) { c.put('file.html', \"<file.html processed by html-loader>\") }]);\r\n```\r\n\r\n### RelativeTo and Prefix\r\n\r\nYou can set the base path of your templates using `relativeTo` and `prefix` parameters. `relativeTo` is used\r\nto strip a matching prefix from the absolute path of the input html file. `prefix` is then appended to path.\r\n\r\nThe prefix of the path up to and including the first `relativeTo` match is stripped, e.g.\r\n\r\n``` javascript\r\nrequire(\"!ngtemplate?relativeTo=/src/!html!/test/src/test.html\");\r\n// c.put('test.html', ...)\r\n```\r\n\r\nTo match the from the start of the absolute path prefix a '//', e.g.\r\n\r\n``` javascript\r\nrequire(\"!ngtemplate?relativeTo=//Users/WearyMonkey/project/test/!html!/test/src/test.html\");\r\n// c.put('src/test.html', ...)\r\n```\r\n\r\nYou can combine `relativeTo` and `prefix` to replace the prefix in the absolute path, e.g.\r\n\r\n``` javascript\r\nrequire(\"!ngtemplate?relativeTo=src/&prefix=build/!html!/test/src/test.html\");\r\n// c.put('build/test.html', ...)\r\n```\r\n\r\n### Module\r\n\r\nBy default ngTemplate loader adds a run method to the global 'ng' module which does not need to explicitly required by your app.\r\nYou can override this by setting the `module` parameter, e.g.\r\n\r\n``` javascript\r\nrequire(\"!ngtemplate?module=myTemplates&relativeTo=/projects/test/app!html!file.html\");\r\n// => returns the javascript:\r\n// angular.module('myTemplates').run(['$templateCache', function(c) { c.put('file.html', \"<file.html processed by html-loader>\") }]);\r\n```\r\n\r\n### Path Separators (Or using on Windows)\r\n\r\n By default, ngTemplate loader will assume you are using unix style path separators '/' for html paths in your project.\r\n e.g. `templateUrl: '/views/app.html'`. If however you want to use Window's style path separators '\\'\r\n e.g. `templateUrl: '\\\\views\\\\app.html'` you can override the separator by providing the pathSep parameter.\r\n\r\n ```javascript\r\n require('ngtemplate?pathSep=\\\\!html!.\\\\test.html')\r\n ```\r\n\r\n Make sure you use the same path separator for the `prefix` and `relativeTo` parameters, all templateUrls and in your webpack.config.js file.\r\n\r\n## webpack config\r\n\r\nIt's recommended to adjust your `webpack.config` so `ngtemplate!html!` is applied automatically on all files ending on `.html`:\r\n\r\n``` javascript\r\nmodule.exports = {\r\n  module: {\r\n    loaders: [\r\n      {\r\n        test: /\\.html$/,\r\n        loader: \"ngtemplate?relativeTo=(path.resolve(__dirname, './app')) + \"/!html\"\r\n      }\r\n    ]\r\n  }\r\n};\r\n```\r\n\r\nThen you only need to write: `require(\"file.html\")`.\r\n\r\n## Install\r\n\r\n`npm install ngtemplate-loader`\r\n\r\n## License\r\n\r\nMIT (http://www.opensource.org/licenses/mit-license.php)",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/WearyMonkey/ngtemplate-loader/issues"
  },
  "_id": "ngtemplate-loader@1.3.0",
  "_from": "ngtemplate-loader@~1.3.0"
}
