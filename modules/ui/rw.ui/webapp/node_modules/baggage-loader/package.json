{
  "name": "baggage-loader",
  "version": "0.2.3",
  "description": "Webpack loader to automatically require any resources related to the required one",
  "keywords": [
    "webpack",
    "loader"
  ],
  "homepage": "https://github.com/deepsweet/baggage-loader",
  "repository": {
    "type": "git",
    "url": "git://github.com/deepsweet/baggage-loader.git"
  },
  "author": {
    "name": "Kir Belevich",
    "email": "kir@soulshine.in",
    "url": "https://github.com/deepsweet"
  },
  "main": "index.js",
  "peerDependencies": {
    "webpack": "1.x.x",
    "loader-utils": "0.x.x",
    "source-map": "0.x.x"
  },
  "devDependencies": {
    "eslint": "^0.8.2",
    "jscs": "^1.6.2"
  },
  "scripts": {
    "test": "eslint index.js lib/*.js && jscs index.js lib/*.js"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "license": "WTFPL",
  "readme": "## \"Baggage\" loader for [webpack](https://webpack.github.io/)\n\n[![npm](http://img.shields.io/npm/v/baggage-loader.svg?style=flat-square)](https://www.npmjs.org/package/baggage-loader)\n[![travis](http://img.shields.io/travis/deepsweet/baggage-loader.svg?style=flat-square)](https://travis-ci.org/deepsweet/baggage-loader)\n[![climate](http://img.shields.io/codeclimate/github/deepsweet/baggage-loader.svg?style=flat-square)](https://codeclimate.com/github/deepsweet/baggage-loader/code)\n[![peer deps](http://img.shields.io/david/peer/deepsweet/baggage-loader.svg?style=flat-square)](https://david-dm.org/deepsweet/baggage-loader#info=peerDependencies)\n[![gratipay](http://img.shields.io/gratipay/deepsweet.svg?style=flat-square)](https://gratipay.com/deepsweet/)\n\nAutomatically require any resources related to the required one. See example below.\n\n[Documentation: Using loaders](https://webpack.github.io/docs/using-loaders.html).\n\n### Install\n\n```sh\n$ npm i -S baggage-loader\n```\n\n### Usage\n\nImagine that you have project structure like this and you're using webpack:\n\n```\ncomponents/\n├── component-1/\n│   ├── script.js\n│   ├── styles.css\n│   └── template.html\n├── component-2/\n│   ├── script.js\n│   └── template.html\n└── component-3/\n    ├── script.js\n    └── styles.css\n```\n\nand in each of component's `script.js` you're doing something like this:\n\n```javascript\nvar template = require('./template.html');\nrequire('./styles.css');\n\nvar html = template({ foo: 'bar' });\n```\n\nNow you have to stop and give it to `baggage-loader`, so:\n\n```javascript\nmodule: {\n    preLoaders: [ {\n        test: /\\/components\\/.+script\\.js$/,\n        // baggage?file=var&file-without-var&…\n        loader: 'baggage?template.html=template&styles.css'\n    } ]\n}\n```\n\nwill become the necessary requires with variables declarations if corresponding files exists:\n\n```javascript\n// injected by preloader at the top of script.js\nvar template = require('./template.html');\nrequire('./styles.css');\n\n// your code\nvar html = template({ foo: 'bar' };\n```\n\nEven more, there are placeholders `[dir]`, `[Dir]`, `[file]` and `[File]`, so you can use them in various tricky ways both with `file` and `var`:\n\n```\nalert/\n├── view.js\n├── templateAlert.html\n└── alertViewStyles.css\n```\n\n```javascript\nloader: 'baggage?template[Dir].html=[file]Template&[dir][File]Styles.css'\n```\n\n```javascript\nvar viewTemplate = require('./templateAlert.html');\nrequire('./alertViewStyles.css');\n```\n\n### Test\n\n`npm test`\n\nSoon.\n\n### License\n[WTFPL](http://www.wtfpl.net/wp-content/uploads/2012/12/wtfpl-strip.jpg)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/deepsweet/baggage-loader/issues"
  },
  "_id": "baggage-loader@0.2.3",
  "_from": "baggage-loader@~0.2.3"
}
